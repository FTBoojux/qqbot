"use strict";
// noinspection JSUnusedGlobalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiveTags = exports.CQText = exports.CQFace = exports.CQRecord = exports.CQVideo = exports.CQAt = exports.CQRps = exports.CQDice = exports.CQShake = exports.CQAnonymous = exports.CQShare = exports.CQContact = exports.CQLocation = exports.CQMusicCustom = exports.CQMusic = exports.CQImage = exports.CQReplyCustom = exports.CQReply = exports.CQRedBag = exports.CQPoke = exports.CQGift = exports.CQForward = exports.CQNodeId = exports.CQNode = exports.CQXml = exports.CQJson = exports.CQCardImage = exports.CQTts = exports.CQ = exports.CQ_TAG_REGEXP = exports.SPLIT = exports.CQTag = void 0;
class CQTag {
    _type;
    _data;
    constructor(type, data) {
        this._type = type ?? "unknown";
        this._data = data ?? {};
        const tag = this.valueOf();
        this._type = tag.type;
        this._data = tag.data;
    }
    /**
     * 用于获取data属性里的字段,<br/>
     * 值得注意的是,当接受消息为 字符串格式 时，本方法返回类型永远为 `string`,
     * 当且仅当接受消息为 数组格式 时，返回类型才可能为正常类型
     * @param key 字段
     * @return 值
     */
    get(key) {
        return this._data[key];
    }
    /**
     * 设置新值
     * @param key 字段
     * @param value 新值
     * @return 替换前的值
     */
    set(key, value) {
        const temp = this._data[key];
        this._data[key] = value;
        return temp;
    }
    toJSON() {
        return this.valueOf();
    }
    toString() {
        const { type, data } = this.valueOf();
        return `[CQ:${type}${Object.entries(data).map(([k, v]) => {
            if (v == null) {
                return "";
            }
            return `,${k}=${exports.CQ.escape(String(v), true)}`;
        }).join("")}]`;
    }
    /**浅拷贝 _data 对象*/
    clone() {
        return new CQTag(this._type, Object.assign({}, this._data));
    }
    /** 转换为纯消息段 */
    valueOf() {
        return {
            type: this._type,
            data: this._data,
        };
    }
    [Symbol.toStringTag]() {
        return CQTag.name;
    }
    get tagName() {
        return this._type;
    }
}
exports.CQTag = CQTag;
exports.SPLIT = /(?=\[CQ:)|(?<=])/;
exports.CQ_TAG_REGEXP = /^\[CQ:([a-z]+)(?:,([^\]]+))?]$/;
exports.CQ = {
    /** 将携带 CQ码 的字符串转换为 CQ码数组 */
    parse(msg) {
        function parse(type = "", data = {}) {
            const tag = exports.ReceiveTags[type];
            if (tag === undefined) {
                console.warn(`type:'${type}' not be support`);
                return new CQTag(type, data);
            }
            return new tag(type, data);
        }
        if (Array.isArray(msg)) {
            return msg.filter(tag => {
                return tag !== null && tag !== undefined;
            }).map(tag => parse(tag.type, tag.data));
        }
        return msg.split(exports.SPLIT).map(tagStr => {
            const match = exports.CQ_TAG_REGEXP.exec(tagStr);
            if (match === null) {
                return new CQText("text", { text: exports.CQ.unescape(tagStr) });
            }
            // `[CQ:share,title=震惊&#44;小伙睡觉前居然...,url=http://baidu.com/?a=1&amp;b=2]`
            const [, tagName, value] = match;
            if (value === undefined) {
                return parse(tagName);
            }
            const data = Object.fromEntries(value.split(",").map((v) => {
                const index = v.indexOf("=");
                return [v.substr(0, index), v.substr(index + 1)];
            }));
            return parse(tagName, data);
        });
    },
    /**
     * 转义
     * @param str 欲转义的字符串
     * @param [insideCQ=false] 是否在CQ码内
     * @returns 转义后的字符串
     */
    escape(str, insideCQ = false) {
        if (!/[[\]&,]/.test(str)) {
            return str;
        }
        const temp = str.replace(/&/g, "&amp;")
            .replace(/\[/g, "&#91;")
            .replace(/]/g, "&#93;");
        if (insideCQ) {
            return temp.replace(/,/g, "&#44;");
        }
        return temp;
    },
    /**
     * 反转义
     *
     * @param str 欲反转义的字符串
     * @returns 反转义后的字符串
     */
    unescape(str) {
        return str.replace(/&#44;/g, ",")
            .replace(/&#91;/g, "[")
            .replace(/&#93;/g, "]")
            .replace(/&amp;/g, "&");
    },
    /**
     * 纯文本
     * @param text 纯文本内容
     */
    text(text) {
        return new CQText("text", { text: String(text) });
    },
    /**
     * QQ 表情
     * @param id QQ 表情 ID,处于 [0,221] 区间
     * @see https://github.com/kyubotics/coolq-http-api/wiki/%E8%A1%A8%E6%83%85-CQ-%E7%A0%81-ID-%E8%A1%A8
     */
    face(id) {
        return new CQFace("face", { id });
    },
    /**
     * 语音
     * @param file 语音文件名(或URL)
     * @param magic 发送时可选, 默认 0, 设置为 1 表示变声
     * @param cache 只在通过网络 URL 发送时有效, 表示是否使用已缓存的文件, 默认 1
     * @param proxy 只在通过网络 URL 发送时有效, 表示是否通过代理下载文件 ( 需通过环境变量或配置文件配置代理 ) , 默认 1
     * @param timeout 只在通过网络 URL 发送时有效, 单位秒, 表示下载网络文件的超时时间 , 默认不超时
     */
    record(file, magic, cache, proxy, timeout) {
        return new CQRecord("record", {
            file, magic, cache, proxy, timeout,
        });
    },
    /**
     * 短视频
     * @param file 视频地址, 支持http和file发送
     * @param cover 视频封面, 支持http, file和base64发送, 格式必须为jpg
     * @param c 通过网络下载视频时的线程数, 默认单线程. (在资源不支持并发时会自动处理)
     */
    video(file, cover, c) {
        return new CQVideo("video", { file, cover, c });
    },
    /**
     * .@某人
     * @param qq @的 QQ 号, `all` 表示全体成员
     * @param name 当在群中找不到此QQ号的名称时使用
     */
    at(qq, name) {
        return new CQAt("at", { qq, name });
    },
    /**
     * 链接分享
     * @param url URL
     * @param title 标题
     * @param content 发送时可选, 内容描述
     * @param image 发送时可选, 图片 URL
     */
    share(url, title, content, image) {
        return new CQShare("share", {
            url,
            title,
            content,
            image,
        });
    },
    /**
     * 音乐分享
     * @param type 分别表示使用 QQ 音乐、网易云音乐、虾米音乐
     * @param id 歌曲 ID
     */
    music(type, id) {
        return new CQTag("music", { type, id });
    },
    /**
     * 音乐自定义分享
     * @param url 点击后跳转目标 URL
     * @param audio 音乐 URL
     * @param title 标题
     * @param content 发送时可选, 内容描述
     * @param image 发送时可选, 图片 URL
     */
    musicCustom(url, audio, title, content, image) {
        return new CQMusicCustom("music", {
            type: "custom",
            url,
            audio,
            title,
            content,
            image,
        });
    },
    /**
     * 图片
     * @param file 图片文件名
     * @param type 图片类型, flash 表示闪照, show 表示秀图, 默认普通图片
     * @param url 图片 URL
     * @param cache 只在通过网络 URL 发送时有效, 表示是否使用已缓存的文件, 默认 1
     * @param id 发送秀图时的特效id, 默认为40000
     * @param c 通过网络下载图片时的线程数, 默认单线程. (在资源不支持并发时会自动处理)
     * @see https://ishkong.github.io/go-cqhttp-docs/cqcode/#%E5%9B%BE%E7%89%87
     */
    image(file, type, url, cache, id, c) {
        return new CQImage("image", {
            file, type, url, cache, id, c,
        });
    },
    /**
     * 回复
     * @param id 回复时所引用的消息id, 必须为本群消息.
     */
    reply(id) {
        return new CQReply("reply", { id });
    },
    /**
     * 自定义回复
     * @param text 自定义回复时的自定义QQ, 如果使用自定义信息必须指定.
     * @param qq 自定义回复时的自定义QQ, 如果使用自定义信息必须指定.
     * @param id 回复时所引用的消息id, 必须为本群消息.
     * @param time 可选. 自定义回复时的时间, 格式为Unix时间
     * @param seq 起始消息序号, 可通过 get_msg 获得
     */
    replyCustom(text, qq, id, time, seq) {
        return new CQReplyCustom("reply", { id, text, qq, time, seq });
    },
    /**
     * 戳一戳
     * @param qq 需要戳的成员
     */
    poke(qq) {
        return new CQPoke("poke", { qq });
    },
    /**
     * 礼物
     * @param qq 接收礼物的成员
     * @param id 礼物的类型
     */
    gift(qq, id) {
        return new CQGift("gift", { qq, id });
    },
    /**
     * 合并转发消息节点
     * @param id 转发消息id, 直接引用他人的消息合并转发, 实际查看顺序为原消息发送顺序
     */
    nodeId(id) {
        return new CQNodeId("node", { id });
    },
    /**
     * 合并转发消息节点
     * @param name 发送者显示名字
     * @param user_id 发送者QQ号
     * @param content 具体消息, 不支持转发套娃, 不支持引用回复
     */
    node(name, user_id, content) {
        return new CQNode("node", { name, user_id: String(user_id), content, seq: content });
    },
    /**
     * XML 消息
     * @param data xml内容, xml中的value部分, 记得实体化处理
     * @param resid 可以不填
     */
    xml(data, resid) {
        return new CQXml("xml", { data, resid });
    },
    /**
     * JSON 消息
     * @param data json内容, json的所有字符串记得实体化处理
     * @param resid 默认不填为0, 走小程序通道, 填了走富文本通道发送
     */
    json(data, resid = 0) {
        return new CQJson("json", { data, resid });
    },
    /**
     * 一种xml的图片消息（装逼大图）<br/> **PS** : xml 接口的消息都存在风控风险, 请自行兼容发送失败后的处理 ( 可以失败后走普通图片模式 )
     * @param file 和image的file字段对齐, 支持也是一样的
     * @param minwidth 默认不填为400, 最小width
     * @param minheight 默认不填为400, 最小height
     * @param maxwidth 默认不填为500, 最大width
     * @param maxheight 默认不填为1000, 最大height
     * @param source 分享来源的名称, 可以留空
     * @param icon 分享来源的icon图标url, 可以留空
     */
    cardimage(file, minwidth, minheight, maxwidth, maxheight, source, icon) {
        return new CQCardImage("cardimage", {
            file, minwidth, minheight, maxwidth, maxheight, source, icon,
        });
    },
    /**
     * 文本转语音
     * @param text 内容
     */
    tts(text) {
        return new CQTts("tts", { text });
    },
    /**
     * 自定义 CQ码
     * @param type CQ码类型
     * @param data CQ码参数
     */
    custom(type, data = {}) {
        return new CQTag(type, data);
    },
    [Symbol.toStringTag]() {
        return "CQ";
    },
};
class CQTts extends CQTag {
    valueOf() {
        return {
            type: "tts",
            data: {
                text: this.text,
            },
        };
    }
    /** 内容 */
    get text() {
        return String(this._data.text);
    }
}
exports.CQTts = CQTts;
class CQCardImage extends CQTag {
    valueOf() {
        return {
            type: "cardimage",
            data: {
                file: this.file,
                minwidth: this.minwidth,
                minheight: this.minheight,
                maxwidth: this.maxwidth,
                maxheight: this.maxheight,
                source: this.source,
                icon: this.icon,
            },
        };
    }
    /** 和image的file字段对齐, 支持也是一样的 */
    get file() {
        return String(this._data.file);
    }
    /** `收` 默认不填为400, 最小width */
    get minwidth() {
        return this._data.minwidth;
    }
    ;
    /** `收` 默认不填为400, 最小height */
    get minheight() {
        return this._data.minheight;
    }
    ;
    /** `收` 默认不填为500, 最大width */
    get maxwidth() {
        return this._data.maxwidth;
    }
    ;
    /** `收` 默认不填为1000, 最大height */
    get maxheight() {
        return this._data.maxheight;
    }
    ;
    /** `收` 分享来源的名称, 可以留空 */
    get source() {
        return this._data.source;
    }
    ;
    /** `收` 分享来源的icon图标url, 可以留空 */
    get icon() {
        return this._data.icon;
    }
    ;
}
exports.CQCardImage = CQCardImage;
class CQJson extends CQTag {
    valueOf() {
        return {
            type: "json",
            data: {
                data: this.data,
                resid: this.resid,
            },
        };
    }
    /** json内容, json的所有字符串记得实体化处理 */
    get data() {
        return String(this._data.data);
    }
    /** `收` 默认不填为0, 走小程序通道, 填了走富文本通道发送 */
    get resid() {
        return this._data.resid;
    }
}
exports.CQJson = CQJson;
class CQXml extends CQTag {
    valueOf() {
        return {
            type: "xml",
            data: {
                data: this.data,
                resid: this.resid,
            },
        };
    }
    /** xml内容, xml中的value部分, 记得实体化处理 */
    get data() {
        return String(this._data.data);
    }
    /** `收` 可以不填 */
    get resid() {
        return this._data.resid;
    }
}
exports.CQXml = CQXml;
class CQNode extends CQTag {
    valueOf() {
        return {
            type: "node",
            data: {
                name: this.name,
                user_id: this.user_id,
                content: this.content,
                seq: this.seq,
            },
        };
    }
    /**发送者显示名字*/
    get name() {
        return String(this._data.name);
    }
    /**@deprecated 发送者QQ号*/
    get uin() {
        return String(this._data.user_id);
    }
    /**发送者QQ号*/
    get user_id() {
        return String(this._data.user_id);
    }
    /**具体消息,不支持转发套娃,不支持引用回复*/
    get content() {
        return this._data.content;
    }
    /**具体消息,不支持转发套娃,不支持引用回复*/
    get seq() {
        return this._data.seq;
    }
}
exports.CQNode = CQNode;
class CQNodeId extends CQTag {
    valueOf() {
        return {
            type: "node",
            data: {
                id: this.id,
            },
        };
    }
    /** 转发消息id, 直接引用他人的消息合并转发, 实际查看顺序为原消息发送顺序 */
    get id() {
        return this._data.id;
    }
}
exports.CQNodeId = CQNodeId;
class CQForward extends CQTag {
    valueOf() {
        return {
            type: "forward",
            data: {
                id: this.id,
            },
        };
    }
    /** 合并转发ID, 需要通过 [get_forward_msg]{@link CQWebSocket.get_forward_msg} API获取转发的具体内容 */
    get id() {
        return String(this._data.id);
    }
}
exports.CQForward = CQForward;
class CQGift extends CQTag {
    valueOf() {
        return {
            type: "gift",
            data: {
                qq: this.qq,
                id: this.id,
            },
        };
    }
    /** 接收礼物的成员 */
    get qq() {
        return Number(this._data.qq);
    }
    /** 礼物的类型 <br/>取值:[0,13]*/
    get id() {
        return Number(this._data.id);
    }
}
exports.CQGift = CQGift;
class CQPoke extends CQTag {
    valueOf() {
        return {
            type: "poke",
            data: {
                qq: this.qq,
            },
        };
    }
    /** 需要戳的成员 */
    get qq() {
        return Number(this._data.qq);
    }
}
exports.CQPoke = CQPoke;
class CQRedBag extends CQTag {
    valueOf() {
        return {
            type: "redbag",
            data: {
                title: this.title,
            },
        };
    }
    /**祝福语/口令*/
    get title() {
        return String(this._data.title);
    }
}
exports.CQRedBag = CQRedBag;
class CQReply extends CQTag {
    valueOf() {
        return {
            type: "reply",
            data: {
                id: this.id,
            },
        };
    }
    /**回复时所引用的消息id, 必须为本群消息.*/
    get id() {
        return Number(this._data.id);
    }
}
exports.CQReply = CQReply;
class CQReplyCustom extends CQTag {
    valueOf() {
        return {
            type: "reply",
            data: {
                id: this.id,
                text: this.text,
                qq: this.qq,
                time: this.time,
                seq: this.seq,
            },
        };
    }
    /**回复时所引用的消息id, 必须为本群消息.*/
    get id() {
        return Number(this._data.id);
    }
    /**自定义回复的信息*/
    get text() {
        return String(this._data.text);
    }
    /**自定义回复时的自定义QQ, 如果使用自定义信息必须指定.*/
    get qq() {
        return Number(this._data.qq);
    }
    /**可选. 自定义回复时的时间, 格式为Unix时间*/
    get time() {
        return this._data.time;
    }
    /**起始消息序号, 可通过 get_msg 获得*/
    get seq() {
        return this._data.seq;
    }
}
exports.CQReplyCustom = CQReplyCustom;
class CQImage extends CQTag {
    valueOf() {
        return {
            type: "image",
            data: {
                file: this.file,
                type: this.type,
                url: this.url,
                cache: this.cache,
                id: this.id,
                c: this.c,
            },
        };
    }
    /** 图片文件名 */
    get file() {
        return String(this._data.file);
    }
    /** 图片类型, flash 表示闪照, show 表示秀图, 默认普通图片 */
    get type() {
        return (this._data.type);
    }
    /** `收` 图片 URL */
    get url() {
        return (this._data.url);
    }
    /** 只在通过网络 URL 发送时有效, 表示是否使用已缓存的文件, 默认 1 */
    get cache() {
        return (this._data.cache);
    }
    /** 发送秀图时的特效id, 默认为40000 <br/>取值:[40000,40005]*/
    get id() {
        return (this._data.id);
    }
    /** 通过网络下载图片时的线程数, 默认单线程. (在资源不支持并发时会自动处理) */
    get c() {
        return (this._data.c);
    }
}
exports.CQImage = CQImage;
class CQMusic extends CQTag {
    valueOf() {
        return {
            type: "music",
            data: {
                type: this.type,
                id: this.id,
            },
        };
    }
    /** 分别表示使用 QQ 音乐、网易云音乐、虾米音乐 */
    get type() {
        return String(this._data.type);
    }
    /** 歌曲 ID */
    get id() {
        return Number(this._data.id);
    }
}
exports.CQMusic = CQMusic;
class CQMusicCustom extends CQTag {
    valueOf() {
        return {
            type: "music",
            data: {
                type: this.type,
                url: this.url,
                audio: this.audio,
                title: this.title,
                content: this.content,
                image: this.image,
            },
        };
    }
    get type() {
        return "custom";
    }
    /** 点击后跳转目标 URL */
    get url() {
        return String(this._data.url);
    }
    /** 音乐 URL */
    get audio() {
        return String(this._data.audio);
    }
    /** 标题 */
    get title() {
        return String(this._data.title);
    }
    /** 发送时可选, 内容描述 */
    get content() {
        return this._data.content;
    }
    /** 发送时可选, 图片 URL */
    get image() {
        return this._data.image;
    }
}
exports.CQMusicCustom = CQMusicCustom;
class CQLocation extends CQTag {
    valueOf() {
        return {
            type: "location",
            data: {
                lat: this.lat,
                lon: this.lon,
                title: this.title,
                content: this.content,
            },
        };
    }
    get lat() {
        return Number(this._data.lat);
    }
    get lon() {
        return Number(this._data.lon);
    }
    get title() {
        return this._data.title;
    }
    get content() {
        return this._data.content;
    }
}
exports.CQLocation = CQLocation;
class CQContact extends CQTag {
    valueOf() {
        return {
            type: "contact",
            data: {
                type: this.type,
                id: this.id,
            },
        };
    }
    get type() {
        return String(this._data.type);
    }
    get id() {
        return Number(this._data.id);
    }
}
exports.CQContact = CQContact;
class CQShare extends CQTag {
    valueOf() {
        return {
            type: "share",
            data: {
                url: this.url,
                title: this.title,
                content: this.content,
                image: this.image,
            },
        };
    }
    get url() {
        return String(this._data.url);
    }
    get title() {
        return String(this._data.title);
    }
    get content() {
        return (this._data.content);
    }
    get image() {
        return (this._data.image);
    }
}
exports.CQShare = CQShare;
class CQAnonymous extends CQTag {
    valueOf() {
        return {
            type: "anonymous",
            data: {},
        };
    }
}
exports.CQAnonymous = CQAnonymous;
class CQShake extends CQTag {
    valueOf() {
        return {
            type: "shake",
            data: {},
        };
    }
}
exports.CQShake = CQShake;
class CQDice extends CQTag {
    valueOf() {
        return {
            type: "dice",
            data: {},
        };
    }
}
exports.CQDice = CQDice;
class CQRps extends CQTag {
    valueOf() {
        return {
            type: "rps",
            data: {},
        };
    }
}
exports.CQRps = CQRps;
class CQAt extends CQTag {
    valueOf() {
        return {
            type: "at",
            data: {
                qq: this.qq,
                name: this.name,
            },
        };
    }
    get qq() {
        return this._data.qq;
    }
    get name() {
        return this._data.name;
    }
}
exports.CQAt = CQAt;
class CQVideo extends CQTag {
    valueOf() {
        return {
            type: "video",
            data: {
                file: this.file,
                cover: this.cover,
                c: this.c,
            },
        };
    }
    get file() {
        return String(this._data.file);
    }
    get cover() {
        return this._data.cover;
    }
    get c() {
        return this._data.c;
    }
}
exports.CQVideo = CQVideo;
class CQRecord extends CQTag {
    valueOf() {
        return {
            type: "record",
            data: {
                file: this.file,
                magic: this.magic,
                url: this.url,
                cache: this.cache,
                proxy: this.proxy,
                timeout: this.timeout,
            },
        };
    }
    /** 语音文件名 */
    get file() {
        return String(this._data.file);
    }
    /** `收` 表示变声,发送时可选, 默认 0, 设置为 1 */
    get magic() {
        return this._data.magic;
    }
    /** `收` 语音 URL */
    get url() {
        return this._data.url;
    }
    /** 只在通过网络 URL 发送时有效, 表示是否使用已缓存的文件, 默认 1 */
    get cache() {
        return this._data.cache;
    }
    /** 只在通过网络 URL 发送时有效, 表示是否通过代理下载文件 ( 需通过环境变量或配置文件配置代理 ) , 默认 1 */
    get proxy() {
        return this._data.proxy;
    }
    /** 只在通过网络 URL 发送时有效, 单位秒, 表示下载网络文件的超时时间 , 默认不超时 */
    get timeout() {
        return this._data.timeout;
    }
}
exports.CQRecord = CQRecord;
class CQFace extends CQTag {
    valueOf() {
        return {
            type: "face",
            data: {
                id: this.id,
            },
        };
    }
    /** QQ 表情 ID,处于 [0,221] 区间 */
    get id() {
        return Number(this._data.id);
    }
}
exports.CQFace = CQFace;
class CQText extends CQTag {
    valueOf() {
        return {
            type: "text",
            data: {
                text: this.text,
            },
        };
    }
    /** 纯文本内容 */
    get text() {
        return String(this._data.text);
    }
}
exports.CQText = CQText;
/**本对象中收录所有会被接收到的CQ码,格式为{ type : CQTag类 }*/
exports.ReceiveTags = {
    at: CQAt,
    face: CQFace,
    text: CQText,
    reply: CQReply,
    image: CQImage,
    contact: CQContact,
    json: CQJson,
    dice: CQDice,
    forward: CQForward,
    anonymous: CQAnonymous,
    location: CQLocation,
    record: CQRecord,
    redbag: CQRedBag,
    rps: CQRps,
    shake: CQShake,
    share: CQShare,
    video: CQVideo,
    xml: CQXml,
};
